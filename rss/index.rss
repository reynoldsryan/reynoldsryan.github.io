<rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:media="http://search.yahoo.com/mrss/" version="2.0"><channel><title>Lorem Ipsum Loquitur</title><description>Thoughts, stories and ideas.</description><link>http://localhost:2368/</link><generator>Ghost 0.7</generator><lastBuildDate>Tue, 12 Jan 2016 00:24:07 GMT</lastBuildDate><atom:link href="http://localhost:2368/rss/" rel="self" type="application/rss+xml"/><ttl>60</ttl><item><title>How to Make Your Angular Code Modular Using Custom Directives</title><description>&lt;p&gt;If you're like me, when you first started coding, you put all your Javascript in one big app.js file and all your HTML in one big index.html file. The problem with this is that as your application grows, so does your headache trying to find particular lines of&lt;/p&gt;</description><link>http://localhost:2368/modular-angular/</link><guid isPermaLink="false">5c7d8c99-179b-4a34-a6d3-0ae312526bdb</guid><dc:creator>Ryan Reynolds</dc:creator><pubDate>Tue, 12 Jan 2016 00:23:13 GMT</pubDate><content:encoded>&lt;p&gt;If you're like me, when you first started coding, you put all your Javascript in one big app.js file and all your HTML in one big index.html file. The problem with this is that as your application grows, so does your headache trying to find particular lines of code or trying to sort out what is exactly doing what. Making your code more modular by breaking it up in to smaller files keeps your code clean, readable and reusable.&lt;/p&gt;

&lt;p&gt;With Angular, you can use custom directives to insert snippets of HTML directly in to the DOM. Let's say you had the following code in your index.html file:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;header&amp;gt;  
&amp;lt;h1&amp;gt; Hello, world! &amp;lt;/h1&amp;gt;  
&amp;lt;/header&amp;gt;  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Obviously this is a small snippet of code, but imagine it was 10, 50 or 100 lines long. You could move this code in to a header.html (or whatever name you choose) file and then create the following directive in your app.js or whatever the relevant Javascript file might be (such as header.js) to insert the contents of your header.html file in to your index.html file.  &lt;/p&gt;

&lt;pre&gt;&lt;code&gt;app.directive("headerInsert", function() {  
    return {
      restrict: 'E',
      templateUrl: "header.html"
    };
  });
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The first argument passed in is the name of your directive. The second is a function that returns the type of template you're using -- restrict: 'E' stands for 'Element' -- and the location where the template can be found. In addition to 'E', there are additional letters such as 'A' for 'Attribute', but 'E' works best for these purposes.&lt;/p&gt;

&lt;p&gt;Finally, in your index.html file, where you removed the above lines of code, all you would need to add is the following line of code to insert everything from your header.html file:  &lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;header-insert&amp;gt;&amp;lt;/header-insert&amp;gt;  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note that 'headerInsert' from your Javascript file is referred to in your HTML file as 'header-insert' - just to keep things interesting.&lt;/p&gt;</content:encoded></item></channel></rss>