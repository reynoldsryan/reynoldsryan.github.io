<rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:media="http://search.yahoo.com/mrss/" version="2.0"><channel><title>Lorem Ipsum Loquitur</title><description>Thoughts, stories and ideas.</description><link>http://localhost:2368/</link><generator>Ghost 0.7</generator><lastBuildDate>Fri, 04 Dec 2015 03:59:10 GMT</lastBuildDate><atom:link href="http://localhost:2368/rss/" rel="self" type="application/rss+xml"/><ttl>60</ttl><item><title>N-Queens, Code and Copyright</title><description>&lt;p&gt;Today we finished pair programming the N-Queens problem, which required finding all the possible solutions of placing 'n' queens on an n-by-n chessboard. This was definitely the hardest sprint so far. It required a lot of whiteboarding to understand both how to check whether a queen could be placed in&lt;/p&gt;</description><link>http://localhost:2368/n-queens-code-and-copyright/</link><guid isPermaLink="false">e71c4f91-1655-4124-9456-a59c73d8c427</guid><dc:creator>Ryan Reynolds</dc:creator><pubDate>Fri, 04 Dec 2015 03:40:39 GMT</pubDate><content:encoded>&lt;p&gt;Today we finished pair programming the N-Queens problem, which required finding all the possible solutions of placing 'n' queens on an n-by-n chessboard. This was definitely the hardest sprint so far. It required a lot of whiteboarding to understand both how to check whether a queen could be placed in a particular spot as well as remembering where in the call stack I was as my function recursed and recursed further to fill out the whole board.  It was really satisfying once my pair programming partner and I finally got our functions to work (and wrote them in such a way that they calculated the possible solutions in a reasonably efficient way).&lt;/p&gt;

&lt;p&gt;I also gave a presentation to the class on when you can use other peoples's code in your code (basically when you have their permission or under license). I also explained what the "add a license" button in Github does and how to decide which license to use in your repo based on how you want people to be able to use your code. &lt;/p&gt;

&lt;p&gt;Toy problem: Return whether a given number is prime.&lt;/p&gt;</content:encoded></item><item><title>Inheritance and Toy Problems</title><description>&lt;p&gt;After the Thanksgiving break, we did a sprint these past couple days on class inheritance.  So now I know how to create a superclass and subclasses who inherit methods and properties of the superclass.&lt;/p&gt;

&lt;p&gt;We also started doing toy problems this week.  Yesterday I wrote code to determine the number&lt;/p&gt;</description><link>http://localhost:2368/inheritance-and-toy-problems/</link><guid isPermaLink="false">09363181-5753-4fc8-aa3d-84193de5067f</guid><dc:creator>Ryan Reynolds</dc:creator><pubDate>Thu, 03 Dec 2015 06:04:35 GMT</pubDate><content:encoded>&lt;p&gt;After the Thanksgiving break, we did a sprint these past couple days on class inheritance.  So now I know how to create a superclass and subclasses who inherit methods and properties of the superclass.&lt;/p&gt;

&lt;p&gt;We also started doing toy problems this week.  Yesterday I wrote code to determine the number of possible moves in a game of rock paper scissors given 'n' number of rounds.  Today the problem consisted of returning the first number in a given array that occurs an even amount of times in the array.&lt;/p&gt;

&lt;p&gt;And now to spend the last hour before bed finishing up my presentation to the class tomorrow that will bring together my new coding knowledge along with my legal knowledge - a short primer on code and copyright.&lt;/p&gt;</content:encoded></item><item><title>Algorithms and Hash Tables</title><description>&lt;p&gt;We finished the first week coding the following data structures: linked lists, trees, graphs, sets, binary search trees, and hash tables.&lt;/p&gt;

&lt;p&gt;Of those, hash tables were the hardest for me to get my head around since I had to understand not only how to create the storage, but how to&lt;/p&gt;</description><link>http://localhost:2368/lessons-from-the-first-week/</link><guid isPermaLink="false">970960f2-cdff-47b6-bd40-7b0591536e63</guid><dc:creator>Ryan Reynolds</dc:creator><pubDate>Mon, 30 Nov 2015 07:51:14 GMT</pubDate><content:encoded>&lt;p&gt;We finished the first week coding the following data structures: linked lists, trees, graphs, sets, binary search trees, and hash tables.&lt;/p&gt;

&lt;p&gt;Of those, hash tables were the hardest for me to get my head around since I had to understand not only how to create the storage, but how to use the get and set methods along with a hashing function to find and store key/value pairs in memory. I found that drawing out on a whiteboard a visual representation of the data structure helped immensely. &lt;/p&gt;

&lt;p&gt;I think so far the biggest challenge though has been figuring out how to approach a coding problem in general. We've been given some guidance on coming up with an algorithm to solve a problem, but since there's still so much new material I'm learning it can be difficult to remember to take things one step at a time. I'm getting better at it though and have learned to read the instructions very carefully to figure out what the unknown is that I'm trying to solve for and then use the knowledge that I have to create a step by step plan to tackle the problem. Before I would have just started coding and using trial and error to eventually get to the solution. Taking the time to devise a plan of attack, draw some diagrams and write some pseudocode is definitely helping me come up with working code quicker. And when it inevitably doesn't work quite as expected the first time around, Chrome dev tools has become my new best friend for quickly finding the source of the error.&lt;/p&gt;

&lt;p&gt;After the first week ended, I had this entire last week off for the Thanksgiving holiday, which I mostly spent camping in Big Sur and enjoying the great outdoors, but I also spent some time earlier this week solving challenges on Code Wars just to keep the momentum going while also reviewing what I did during my first week at MakerSquare.  I'm excited to see what this next week brings!&lt;/p&gt;</content:encoded></item><item><title>Recursion, Re-implementing underscore.js, Data Structures</title><description>&lt;p&gt;I've only been at MakerSquare for four days and it feels like four weeks. And I mean that in the best possible way!&lt;/p&gt;

&lt;p&gt;In the past four days, I've done the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Learned what recursion is and how to write recursive functions &lt;/li&gt;
&lt;li&gt;Implemented 15 underscore.js functions&lt;/li&gt;
&lt;li&gt;Implemented stack and&lt;/li&gt;&lt;/ul&gt;</description><link>http://localhost:2368/recursion-re-implementing-underscore-js-data-structures/</link><guid isPermaLink="false">d7302883-7317-4dfc-b869-aea2b2e9422c</guid><dc:creator>Ryan Reynolds</dc:creator><pubDate>Fri, 20 Nov 2015 06:43:41 GMT</pubDate><content:encoded>&lt;p&gt;I've only been at MakerSquare for four days and it feels like four weeks. And I mean that in the best possible way!&lt;/p&gt;

&lt;p&gt;In the past four days, I've done the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Learned what recursion is and how to write recursive functions &lt;/li&gt;
&lt;li&gt;Implemented 15 underscore.js functions&lt;/li&gt;
&lt;li&gt;Implemented stack and queue using the following four instantiation patterns: functional, functional with shared methods, prototypal and pseudoclassical&lt;/li&gt;
&lt;li&gt;Utilized pair programming as both driver and navigator for all of the above (I really like coding this way!)&lt;/li&gt;
&lt;li&gt;Learned about lexical scoping and closure&lt;/li&gt;
&lt;li&gt;Used github daily to push my code to my repos&lt;/li&gt;
&lt;li&gt;Learned how to create an algorithm to solve a problem&lt;/li&gt;
&lt;li&gt;Went over coding best practices&lt;/li&gt;
&lt;li&gt;Examined function binding and how to use "this"&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Phew!&lt;/p&gt;</content:encoded></item><item><title>First Steps Toward Becoming a Web Developer</title><description>&lt;p&gt;After five years of practicing law, I quit my corporate law job to decide what I wanted to do with my life.  I was never happy drafting contracts on a daily basis, so I wanted to take a step back to reflect on what I do enjoy doing so I&lt;/p&gt;</description><link>http://localhost:2368/first-steps-toward-becoming-a-web-developer/</link><guid isPermaLink="false">44d68b1a-e835-47a1-8615-9d22df1d8bd5</guid><dc:creator>Ryan Reynolds</dc:creator><pubDate>Fri, 20 Nov 2015 06:07:19 GMT</pubDate><content:encoded>&lt;p&gt;After five years of practicing law, I quit my corporate law job to decide what I wanted to do with my life.  I was never happy drafting contracts on a daily basis, so I wanted to take a step back to reflect on what I do enjoy doing so I could find a way to incorporate that in to my next job.  So here we are after six or so months of soul searching, and a love of technology combined with a desire to build something in order to scratch that creative itch that wasn't satisfied while practicing law has led me to web development. Thus, the name for this blog - a mix of Lorem Ipsum (developer pseudo latin nonsense) and Res Ipsa Loquitur (a legal term meaning "the thing speaks for itself") - so roughly translating to Lorem Ipsum Speaks.&lt;/p&gt;

&lt;p&gt;Monday was my first day at MakerSquare, a coding school in LA that focuses on JavaScript.  My experience with coding before this was a month of self study followed by a month of night class to make sure I wanted to make the time and financial commitment that is being a student at MakerSquare. I really enjoyed coding and so here I am just starting a marathon to learn as much about JavaScript as I can 12 to 14 hours a day, six days a week, for the next three months - so all told roughly around 1000 hours.&lt;/p&gt;

&lt;p&gt;I am starting this blog to keep track of what I'm learning since the days are already flying by and the pace is breakneck so I don't want to look back six weeks from now and forget how I got there. &lt;/p&gt;</content:encoded></item></channel></rss>