<rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:media="http://search.yahoo.com/mrss/" version="2.0"><channel><title>Lorem Ipsum Loquitur</title><description>Thoughts, stories and ideas.</description><link>http://localhost:2368/</link><generator>Ghost 0.7</generator><lastBuildDate>Fri, 05 Feb 2016 22:36:10 GMT</lastBuildDate><atom:link href="http://localhost:2368/rss/" rel="self" type="application/rss+xml"/><ttl>60</ttl><item><title>Simple JWT Authentication in a Redux App</title><description>&lt;p&gt;There seem to be many different opinions on the best way to implement client-side authentication using JSON Web Tokens in a Redux app, but I couldn't find any that explained how to do so in a simple way for smaller applications that didn't require production-level authentication. I came up with&lt;/p&gt;</description><link>http://localhost:2368/simple-jwt-authentication-in-a-redux-app/</link><guid isPermaLink="false">860b5852-975a-4cb0-af1e-710aa11e2a7d</guid><dc:creator>Ryan Reynolds</dc:creator><pubDate>Fri, 05 Feb 2016 22:35:42 GMT</pubDate><content:encoded>&lt;p&gt;There seem to be many different opinions on the best way to implement client-side authentication using JSON Web Tokens in a Redux app, but I couldn't find any that explained how to do so in a simple way for smaller applications that didn't require production-level authentication. I came up with the following which has worked for me and is fairly quick and easy to set up.&lt;/p&gt;

&lt;p&gt;(For a description of JWTs and a thorough explanation of how to implement the server-side of things, take a look at &lt;a href="http://www.sitepoint.com/using-json-web-tokens-node-js/"&gt;http://www.sitepoint.com/using-json-web-tokens-node-js/&lt;/a&gt;.)&lt;/p&gt;

&lt;p&gt;The implementation looks identical whether you are signing up a user or logging in a user, so I'll just go over the code for sign up. &lt;/p&gt;

&lt;p&gt;First, create your Redux store using the redux-promise middleware:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;import { createStore, applyMiddleware } from 'redux';  
import ReduxPromise from 'redux-promise';

let store = createStore(reducers, applyMiddleware(ReduxPromise));  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Your sign up form should call an action creator that sends over the user's email and password to the server:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;import axios from 'axios';

export const SIGNUP_USER = 'SIGNUP_USER';

export function signupUser(email, password) {  
  let tokenFromServer = axios.post('/signup', {user: {
    email: email,
    password: password
  }}).catch((response) =&amp;gt; {
    console.error('Error in sign up: ', response);
  });

  return {
    type: SIGNUP_USER,
    payload: tokenFromServer
  };
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Axios is a great promise-based HTTP client for making requests to the server. Because we are using redux-promise, the action will only be sent to the reducers if the promise successfully resolves (i.e., it gets a token back from the server). &lt;/p&gt;

&lt;p&gt;Create a reducer that sets the token in local storage and returns a new object that stores the token in the Redux state:  &lt;/p&gt;

&lt;pre&gt;&lt;code&gt;import { SIGNUP_USER } from '../actions';

export default function (state = { token: localStorage.getItem('token') }, action) {  
  switch(action.type) {
  case SIGNUP_USER:
    localStorage.setItem('token',     action.payload.headers.token);
    return Object.assign({}, state,
      { token: localStorage.getItem('token') });
  default:
    return state;
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In your routes file, you can then check whether your user has a token when they attempt to navigate to a protected route:  &lt;/p&gt;

&lt;pre&gt;&lt;code&gt;const checkAuth = (nextState, replace) =&amp;gt; {  
  if(!localStorage.getItem('token')) {
    replace({ pathname: '/' });
  }
};

export default (  
&amp;lt;Route path='/' component={App}&amp;gt;  
  &amp;lt;IndexRoute component={Index} /&amp;gt;
  &amp;lt;Route path='protected' onEnter={checkAuth} component={Protected} /&amp;gt;
&amp;lt;/Route&amp;gt;  
);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Finally, add the following action and reducer to your app to logout your user and remove the token:  &lt;/p&gt;

&lt;pre&gt;&lt;code&gt;export function logoutUser() {  
  return {
    type: LOGOUT_USER
  };
}

case LOGOUT_USER:  
    localStorage.removeItem('token');
    return Object.assign({}, state,
      { token: localStorage.getItem('token') });
&lt;/code&gt;&lt;/pre&gt;</content:encoded></item><item><title>Hooking React Router up to Redux</title><description>&lt;p&gt;One struggle I had this week was figuring out how to get my routes in my React application to play nice  with Redux. Here's a step by step in case anyone else has the same challenge. This assumes a basic knowledge of how to set up a React/Redux application&lt;/p&gt;</description><link>http://localhost:2368/hooking-react-route-up-to-redux/</link><guid isPermaLink="false">80ef16a2-d067-4eaf-aa1b-9f4f0a191775</guid><dc:creator>Ryan Reynolds</dc:creator><pubDate>Tue, 26 Jan 2016 16:45:20 GMT</pubDate><content:encoded>&lt;p&gt;One struggle I had this week was figuring out how to get my routes in my React application to play nice  with Redux. Here's a step by step in case anyone else has the same challenge. This assumes a basic knowledge of how to set up a React/Redux application using ES6 (and if you don't, I highly recommend Stephen Grider's Udemy course at &lt;a href="https://www.udemy.com/react-redux"&gt;https://www.udemy.com/react-redux&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;First, npm install 'react-router' and 'react-router-redux' and then include the following in your list of imported modules in your top-level index.js:  &lt;/p&gt;

&lt;pre&gt;&lt;code&gt;import React from 'react';  
import ReactDOM from 'react-dom';  
import { Provider } from 'react-redux';  
import { combineReducers, createStore, applyMiddleware, compose } from 'redux';  
import { Router, Route, browserHistory } from 'react-router';  
import { routeReducer, syncHistory } from 'react-router-redux';  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Next, in the same index.js file, create your Redux store like so (the devTools language is optional, but I have found the Redux Chrome extension to be EXTREMELY valuable - download it at &lt;a href="https://chrome.google.com/webstore/detail/redux-devtools/lmhkpmbekcpmknklioeibfkpmmfibljd?hl=en"&gt;https://chrome.google.com/webstore/detail/redux-devtools/lmhkpmbekcpmknklioeibfkpmmfibljd?hl=en&lt;/a&gt;):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;const history = browserHistory;  
const middleware = syncHistory(history);  
const reducers = combineReducers({  
  routing: routeReducer
  ADDITIONAL REDUCERS GO HERE
});
const createStoreWithMiddleware = compose(applyMiddleware(middleware), window.devToolsExtension ? window.devToolsExtension() : f =&amp;gt; f)(createStore);  
const store = createStoreWithMiddleware(reducers);  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then, configure your routes like so:  &lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ReactDOM.render(  
  &amp;lt;Provider store={store}&amp;gt;
    &amp;lt;Router history={history}&amp;gt;
      &amp;lt;Route path='/' component={App}&amp;gt;
        &amp;lt;Route path='page1' component={Page1} /&amp;gt;
        &amp;lt;Route path='page2' component={Page2} /&amp;gt;
      &amp;lt;/Route&amp;gt;
    &amp;lt;/Router&amp;gt;
  &amp;lt;/Provider&amp;gt;, document.querySelector('.container'));
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Finally, when you create your App component, be sure to include the following to make your Page 1 and Page 2 show up:  &lt;/p&gt;

&lt;pre&gt;&lt;code&gt;export default class App extends Component {  
  render() {
    return (
      {this.props.children}
    );
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you wanted to nest content within Page 1, you would simply tweak your routing like so:  &lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;Route path='/' component={App}&amp;gt;  
  &amp;lt;Route path='page1' component={Page1}&amp;gt;
    &amp;lt;Route path='subpage1' component={SubPage1} /&amp;gt;
  &amp;lt;/Route&amp;gt;
  &amp;lt;Route path='page2' component={Page2} /&amp;gt;
&amp;lt;/Route&amp;gt;  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Be sure to include {this.props.children} in the render function of your Page1 component like in App above to make your SubPage1 component render to the screen.&lt;/p&gt;</content:encoded></item><item><title>Promises Inside a For Loop</title><description>&lt;p&gt;I stumbled across an awesome fix for a problem I was encountering this week. Basically I was trying to run a promise in every iteration of a for loop like so:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;for (var i = 0; i &amp;lt; array.length; i++) {  
        this.doSomething()
        .then(function() {...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;But written this way the for&lt;/p&gt;</description><link>http://localhost:2368/promises-inside-a-for-loop/</link><guid isPermaLink="false">b6733031-1764-4d22-b53e-8404b3c0c15b</guid><dc:creator>Ryan Reynolds</dc:creator><pubDate>Mon, 18 Jan 2016 02:50:03 GMT</pubDate><content:encoded>&lt;p&gt;I stumbled across an awesome fix for a problem I was encountering this week. Basically I was trying to run a promise in every iteration of a for loop like so:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;for (var i = 0; i &amp;lt; array.length; i++) {  
        this.doSomething()
        .then(function() {...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;But written this way the for loop went through every iteration and got to the end of the array before it ever got to the '.then' statement. Thankfully, I found the following helpful code snippet from Todd Motto - thanks Todd!&lt;/p&gt;

&lt;p&gt;&lt;a href="http://jsfiddle.net/toddmotto/k4Ycr/"&gt;http://jsfiddle.net/toddmotto/k4Ycr/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Basically, you wrap your promise in a function that is immediately invoked, passing in each item in the array like so:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;for (var i = 0; i &amp;lt; array.length; i++) {  
      (function(element)
        this.doSomething()
        .then(function() {
          console.log(element);
        });
      })(array[i]);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Written this way, the current element is captured in a closure and the promise runs for each element in the array. Awesome!&lt;/p&gt;</content:encoded></item><item><title>How to Make Your Angular Code Modular Using Custom Directives</title><description>&lt;p&gt;If you're like me, when you first started coding, you put all your Javascript in one big app.js file and all your HTML in one big index.html file. The problem with this is that as your application grows, so does your headache trying to find particular lines of&lt;/p&gt;</description><link>http://localhost:2368/modular-angular/</link><guid isPermaLink="false">5c7d8c99-179b-4a34-a6d3-0ae312526bdb</guid><dc:creator>Ryan Reynolds</dc:creator><pubDate>Tue, 12 Jan 2016 00:23:13 GMT</pubDate><content:encoded>&lt;p&gt;If you're like me, when you first started coding, you put all your Javascript in one big app.js file and all your HTML in one big index.html file. The problem with this is that as your application grows, so does your headache trying to find particular lines of code or trying to sort out what is exactly doing what. Making your code more modular by breaking it up in to smaller files keeps your code clean, readable and reusable.&lt;/p&gt;

&lt;p&gt;With Angular, you can use custom directives to insert snippets of HTML directly in to the DOM. Let's say you had the following code in your index.html file:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;header&amp;gt;  
&amp;lt;h1&amp;gt; Hello, world! &amp;lt;/h1&amp;gt;  
&amp;lt;/header&amp;gt;  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Obviously this is a small snippet of code, but imagine it was 10, 50 or 100 lines long. You could move this code in to a header.html (or whatever name you choose) file and then create the following directive in your app.js or whatever the relevant Javascript file might be (such as header.js) to insert the contents of your header.html file in to your index.html file.  &lt;/p&gt;

&lt;pre&gt;&lt;code&gt;app.directive("headerInsert", function() {  
    return {
      restrict: 'E',
      templateUrl: "header.html"
    };
  });
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The first argument passed in is the name of your directive. The second is a function that returns the type of template you're using -- restrict: 'E' stands for 'Element' -- and the location where the template can be found. In addition to 'E', there are additional letters such as 'A' for 'Attribute', but 'E' works best for these purposes.&lt;/p&gt;

&lt;p&gt;Finally, in your index.html file, where you removed the above lines of code, all you would need to add is the following line of code to insert everything from your header.html file:  &lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;header-insert&amp;gt;&amp;lt;/header-insert&amp;gt;  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note that 'headerInsert' from your Javascript file is referred to in your HTML file as 'header-insert' - just to keep things interesting.&lt;/p&gt;</content:encoded></item></channel></rss>